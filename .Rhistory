recipe_ingredients_mapping <- recipe_ingredients_mapping[recipe_ingredients_mapping$recipe_id %in% recipes$recipe_id,]
recipes_rate <- recipes_rate[recipes_rate$recipe_id %in% recipes$recipe_id,]
# preparation for population
temporary_table_users <- data.table(created_at = users$created_at)
temporary_table_users <- cbind(my_user = 1, temporary_table_users)
temporary_table_users$new_date <- as.Date(temporary_table_users$created_at, format="%Y-%m-%d")
tmp <- list()
tmp$y <- format(temporary_table_users$new_date, format="%Y")
tmp$w <- format(temporary_table_users$new_date, format="%W")
tmp$y[tmp$w=="00"] <- as.character(as.numeric(tmp$y[tmp$w=="00"]) - 1)
tmp$w[tmp$w=="00"] <- "52"
temporary_table_users$new_date <- paste(tmp$y, tmp$w, sep = "-")
temporary_table_users2 <- ddply(temporary_table_users, .(new_date), summarize, pop=sum(my_user))
temporary_table_users2$cumsum_users <- cumsum(temporary_table_users2$pop)
temporary_table_users2$period <- seq(from = 1, to = nrow(temporary_table_users2))
### WORKS BECAUSE the number of periods is the same as for the oldest recipe == 2606
### WORKS BECAUSE the final population is equal to the nr of users == 329209
# select only the recipes we need and add column of 1s (reference for adopters, rate and comments)
recipes_create <- cbind(starting_week = 1, recipes_create)
recipes_create <- cbind(end = max(recipes_rate$timestamp), recipes_create)
recipes_create$timestamp <- as.Date(recipes_create$timestamp)
recipes_create$end <- as.Date(recipes_create$end)
# add calendar week of creation for every recipe
add_calendar_week <- function(table_for_calendar_week) {
Calendar_week <- as.numeric(strftime(table_for_calendar_week$timestamp, format = "%W"))
result <- cbind(table_for_calendar_week, Calendar_week)
return(result)
}
recipes_create <- add_calendar_week(recipes_create)
# add weeks of life for every recipe
add_life_time_to_table <- function(table_to_add) {
life_in_weeks <- ceiling(difftime(max(recipes_rate$timestamp), table_to_add$timestamp, units = "weeks"))
result <- cbind(table_to_add, life_in_weeks)
return(result)
}
recipes_create <- add_life_time_to_table(recipes_create)
### TABLE CONSTRUCTION ###
create_table_for_recipe <- function(row_to_calculate) {
n_weeks <- row_to_calculate$life_in_weeks # for every row, take the life in weeks
id_col <- replicate(n_weeks, row_to_calculate$recipe_id) # for every row in recipes_create, print the recipe_id for life_in_weeks time
data.table(
"RECIPE ID" = id_col,
period_in_weeks = seq(from = 1, to = n_weeks),
calendar_week = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%U"),
year = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%Y"),
total_adopters = calculate_adopters(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
mean_rate = calculate_mean(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
nr_comments = calculate_comments(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
population_size = as.numeric(tail(temporary_table_users2$cumsum_users, as.numeric(n_weeks)))
)
}
final_table <- data.table(
"RECIPE ID" = numeric(),
period_in_weeks = numeric(),
calendar_week = numeric(),
year = numeric(),
total_adopters = numeric(),
mean_rate = numeric(),
nr_comments = numeric(),
population_size = numeric()
)
## *** creation of the link to the specific period in which I have to add a new adopter
# nrow = total adopters, week = period in which adopted
# --> calculation of the nr. of adopters
calculate_adopters <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
adopters_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_adoption <- ceiling(difftime(adopters_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe until the rate has been given (for every rate)
adopters_of_rec <- cbind(adopters_of_rec, week_adoption) # add column with life (in weeks) for every rate to the subset
adoption_by_week <- 0
count_adoption <- 0
end_week <- start_week + n_weeks # total number of weeks ~ the life
for (week in start_week:end_week) { # start_week = column created above (~ starting_week)
partial_count <- nrow(filter(adopters_of_rec, adopters_of_rec$week_adoption == week)) # *** returns cumulated number of rows = nr of rates per recipe = nr of adopters
count_adoption <- count_adoption + partial_count # gives total adopters
adoption_by_week[week - start_week] <- count_adoption # tell at which week in the life (~period) you print a new adopter
}
return(adoption_by_week)
}
# --> calculation of the mean rate
calculate_mean <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
rates_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_rate_created <- ceiling(difftime(rates_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe, until the rate (for every rate)
rates_of_rec <- cbind(rates_of_rec, week_rate_created) # add column with life (in weeks) for every rate
rate_by_week <- 0
end_week <- start_week + n_weeks # start_week is the column with all 1s created before (--> starting_week)
n_rate <- 0
total_sum_rate <- 0
avg <- 0
for (week in start_week:end_week) {
rate_of_week <- rates_of_rec[rates_of_rec$week_rate_created == week,]
if (nrow(rate_of_week) > 0) {
n_rate <- n_rate + nrow(rate_of_week) # calculate the total number of rates as 0 (n_rate) + nr of rows in the subset l-130
total_sum_rate <- total_sum_rate + sum(rate_of_week$rating)
avg <- total_sum_rate / n_rate
}
rate_by_week[week - start_week] <- avg
}
return(rate_by_week)
}
# --> calculation of nr. of comments
calculate_comments <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
comments_of_rec <- recipe_comments[recipe_comments$recipe_id == single_recipe,]
week_comment_created <- ceiling(difftime(comments_of_rec$created_at, creation_timestamp, units = "weeks"))
comments_of_rec <- cbind(comments_of_rec, week_comment_created)
comments_by_week <- 0
count_comment <- 0
end_week <- start_week + n_weeks
for (week in start_week:end_week) {
partial_count <- nrow(filter(comments_of_rec, comments_of_rec$week_comment_created == week))
count_comment <- count_comment + partial_count
comments_by_week[week - start_week] <- count_comment
}
return(comments_by_week)
}
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
View(final_table)
library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# upload tables of interest
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
### MONICA'S TABLE CREATION ###
# select only the recipes we need
recipes <- recipes[recipes$category == "Main dishes - meat" | recipes$category == "Main dishes - fish"
| recipes$category == "Main dishes - others" | recipes$category == "Main dishes - vegetarian"
| recipes$category == "Pasta & rice dishes" | recipes$category == "Starters"]
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
recipe_comments <- recipe_comments[recipe_comments$recipe_id %in% recipes$recipe_id,]
recipe_ingredients_mapping <- recipe_ingredients_mapping[recipe_ingredients_mapping$recipe_id %in% recipes$recipe_id,]
recipes_rate <- recipes_rate[recipes_rate$recipe_id %in% recipes$recipe_id,]
# --> emission calculation
# ingredients_emissions <- rename(ingredients_emissions, clean = name)
recipe_ingredients_mapping <- merge(recipe_ingredients_mapping, ingredients_emissions,
by.x="clean", by.y="name", all.x=TRUE)
recipe_ingredients_mapping$co2emissions <- as.numeric(
recipe_ingredients_mapping$quantity*recipe_ingredients_mapping$emissions)
h_2 <- "co2emissions"
total_co2_emission <- unique(recipe_ingredients_mapping[, lapply(.SD, sum, na.rm=TRUE), by=recipe_id, .SDcols=h_2])
# --> mean rating calculation
h.1 <- "rating"
mean_rating <- unique(recipes_rate[, lapply(.SD, mean, na.rm=TRUE), by=recipe_id, .SDcols=h.1])
names(mean_rating)[2] <- "mean_rating"
# --> recipe age in weeks calculation
recipes_create <- recipes_create[, age_in_weeks :=ceiling(difftime(as.Date("31-12-2019", "%d-%m-%Y"),
recipes_create$timestamp, units = "weeks"))]
# --> nr comments calculation
recipe_comments <- recipe_comments[, nr_comments := as.numeric(.N), by = recipe_id] # count elements
recipe_comments <- recipe_comments[!duplicated(recipe_id),]
# --> nr adopters calculation
recipes_rate <- recipes_rate[, nr_adopters := as.numeric(.N), by = recipe_id] # count elements
recipes_rate <- recipes_rate[!duplicated(recipe_id),]
# --> creator characteristics
age_of_creator_when_creating <- users[, age_of_creator := year(users$created_at) - year(users$birthday) ]
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "cooking_skills")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "age_of_creator")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "country")], by="user_id", all.x = TRUE)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- "raw_type"
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  3,"meat", type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
### table first part creation ###
table_first_part <- data.table(recipe_id=recipes$recipe_id)
table_first_part <- merge(x=table_first_part, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "cooking_skills")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_of_creator")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=total_co2_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_rate[, c("recipe_id", "nr_adopters")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=mean_rating[, c("recipe_id", "mean_rating")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipe_comments[, c("recipe_id", "nr_comments")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_in_weeks")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "country")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "timestamp")], by="recipe_id", all.x = TRUE)
View(total_co2_emission)
View(mean_rating)
View(recipe_comments)
View(recipes_rate)
View(age_of_creator_when_creating)
View(recipes_create)
View(recipe_type)
View(table_first_part)
stargazer(as.data.frame(sumary_statistics), type = "text")
sumary_statistics <- table_first_part %>%
subset(select=c("co2emissions", "age_in_weeks", "nr_adopters", "mean_rating",
"nr_comments", "age_of_creator"))
stargazer(as.data.frame(sumary_statistics), type = "text")
sumary_statistics <- table_first_part %>%
subset(select=c("co2emissions", "nr_adopters", "mean_rating",
"nr_comments", "age_of_creator", "age_in_weeks"))
stargazer(as.data.frame(sumary_statistics), type = "text")
table_first_part$cooking_level <- sample(1:nrow(table_first_part))
table_first_part <- table_first_part %>%
mutate(cooking_level = ifelse(cooking_skills == "beginner", 1, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "amateurchef", 2, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "advanced", 3, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "chefcook", 4, cooking_level))
table_first_part_2 <- table_first_part[complete.cases(table_first_part[ , "cooking_skills"]),]
ggplot(table_first_part_2)+
geom_histogram(aes(x=cooking_level, fill=cooking_skills),
bins = 8) + labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
table_first_part$graph_type <- sample(1:nrow(table_first_part))
table_first_part <- table_first_part %>%
mutate(graph_type = ifelse(type == "vegan", 1, graph_type)) %>%
mutate(graph_type = ifelse(type == "vegetarian", 2, graph_type)) %>%
mutate(graph_type = ifelse(type == "meat", 3, graph_type))
table_first_part_11 <- table_first_part[complete.cases(table_first_part[ , "type"]),]
ggplot(table_first_part_11)+
geom_histogram(aes(x=graph_type, fill=type),
bins = 8) + labs(title="Distribution of recipe types",
x="Type", y = "Count") + theme_bw()
ggplot(table_first_part_11)+
geom_histogram(aes(x=graph_type, fill=type),
bins = 8) + labs(title="Distribution of recipe types",
x="Type", y = "Count") + theme_minimal()
ggplot(sub_age, aes(x = age_of_creator,
y = ln_emissions)) + geom_point(size=2, shape=23, color="palegreen4",
alpha = 0.8) + theme_minimal()
sub_age <- data.table(emissions=table_first_part$co2emissions, age_of_creator=table_first_part$age_of_creator)
sub_age <- sub_age[complete.cases(sub_age), ]
sub_age <- sub_age[sub_age$emissions != 0, ]
sub_age$ln_emissions <- log(sub_age$emissions, base = exp(1))
sub_age <- sub_age[sub_age$age_of_creator > 0]
sub_adopters <- data.table(emissions=table_first_part$co2emissions, nr_adopters=table_first_part$nr_adopters)
sub_adopters <- sub_adopters[complete.cases(sub_adopters), ]
sub_adopters <- sub_adopters[sub_adopters$emissions != 0, ]
sub_adopters$ln_emissions <- log(sub_adopters$emissions, base = exp(1))
sub_adopters$ln_adopters <- log(sub_adopters$nr_adopters, base = exp(1))
sub_rate <- data.table(emissions=table_first_part$co2emissions, mean_rating=table_first_part$mean_rating)
sub_rate <- sub_rate[complete.cases(sub_rate), ]
sub_rate <- sub_rate[sub_rate$emissions != 0, ]
sub_rate$ln_emissions <- log(sub_rate$emissions, base = exp(1))
sub_comments <- data.table(emissions=table_first_part$co2emissions, nr_comments=table_first_part$nr_comments)
sub_comments <- sub_comments[complete.cases(sub_comments), ]
sub_comments <- sub_comments[sub_comments$emissions != 0, ]
sub_comments$ln_emissions <- log(sub_comments$emissions, base = exp(1))
sub_comments$ln_comments <- log(sub_comments$nr_comments, base = exp(1))
sub_life <- data.table(emissions=table_first_part$co2emissions, age_in_weeks=table_first_part$age_in_weeks)
sub_life <- sub_life[complete.cases(sub_life), ]
sub_life <- sub_life[sub_life$emissions != 0, ]
sub_life$ln_emissions <- log(sub_life$emissions, base = exp(1))
ggplot(sub_age, aes(x = age_of_creator,
y = ln_emissions)) + geom_point(size=2, shape=23, color="palegreen4",
alpha = 0.8) + theme_minimal()
my_ingredient_emission <- data.table(ingredient=recipe_ingredients_mapping$raw,
emissions=recipe_ingredients_mapping$emissions,
type=recipe_ingredients_mapping$type)
my_ingredient_emission <- unique(my_ingredient_emission)
my_ingredient_emission <- my_ingredient_emission[complete.cases(my_ingredient_emission[ , "emissions"]),] # emissions or 2
freq_ingredients <- as.data.frame(table(recipe_ingredients_mapping$raw))
freq_ingredients <- rename(freq_ingredients, ingredient = Var1)
my_ingredient_emission <- merge(x=my_ingredient_emission, y=freq_ingredients[, c("ingredient", "Freq")],
by="ingredient", all.x = TRUE)
order.emissions <- order(my_ingredient_emission$emissions)
my_ingredient_emission <- my_ingredient_emission[order.emissions,]
my_ingredient_emission$rank <- rank(my_ingredient_emission$emissions)
View(my_ingredient_emission)
aa <- tail(my_ingredient_emission, 5)
View(aa)
highest_emission <- tail(my_ingredient_emission, 5)
lowest_emission <- head(my_ingredient_emission, 5)
View(lowest_emission)
order.emissions <- order(my_ingredient_emission$Freq)
order.freq <- order(my_ingredient_emission$Freq)
highest_use <- tail(my_ingredient_emission, 5)
View(highest_use)
order.freq <- order(my_ingredient_emission$Freq)
my_ingredient_emission <- my_ingredient_emission[order.freq,]
highest_use <- tail(my_ingredient_emission, 5)
lowest_use <- head(my_ingredient_emission, 5)
View(lowest_use)
my_ingredient_emission <- data.table(ingredient=recipe_ingredients_mapping$raw,
emissions=recipe_ingredients_mapping$emissions,
type=recipe_ingredients_mapping$type)
my_ingredient_emission <- unique(my_ingredient_emission)
my_ingredient_emission <- my_ingredient_emission[complete.cases(my_ingredient_emission[ , "emissions"]),] # emissions or 2
freq_ingredients <- as.data.frame(table(recipe_ingredients_mapping$raw))
freq_ingredients <- rename(freq_ingredients, ingredient = Var1)
my_ingredient_emission <- merge(x=my_ingredient_emission, y=freq_ingredients[, c("ingredient", "Freq")],
by="ingredient", all.x = TRUE)
order.emissions <- order(my_ingredient_emission$emissions)
my_ingredient_emission <- my_ingredient_emission[order.emissions,]
highest_emission <- tail(my_ingredient_emission, 5)
View(highest_emission)
lowest_emission <- head(my_ingredient_emission, 5)
View(lowest_emission)
order.freq <- order(my_ingredient_emission$Freq)
my_ingredient_emission <- my_ingredient_emission[order.freq,]
highest_use <- tail(my_ingredient_emission, 5)
lowest_use <- head(my_ingredient_emission, 5)
my_ingredient_emission$rank <- rank(my_ingredient_emission$emissions)
order.emissions <- order(my_ingredient_emission$emissions)
my_ingredient_emission <- my_ingredient_emission[order.emissions,]
highest_emission <- tail(my_ingredient_emission, 5)
View(highest_emission)
sub_one <- data.table(recipe_id = table_first_part$recipe_id,
age_of_creator = table_first_part$age_of_creator,
type = table_first_part$type,
coooking_skills = table_first_part$cooking_skills,
country = table_first_part$country,
emissions = table_first_part$co2emissions)
sub_one <- sub_one[complete.cases(sub_one),]
View(sub_one)
## Do age of the creator, life of recipe, type, cooking skills, (and country) influence emissions?
sub_one <- data.table(age_of_creator = table_first_part$age_of_creator,
age_of_recipe = table_first_part$age_in_weeks,
type = table_first_part$type,
coooking_skills = table_first_part$cooking_skills,
country = table_first_part$country,
emissions = table_first_part$co2emissions)
sub_one <- sub_one[complete.cases(sub_one),]
View(sub_life)
sub_one$ln_emissions <- log(sub_one$emissions, base = exp(1))
# lm_tot <- lm(ln_emissions ~ age_of_creator + age_of_recipe + type + coooking_skills + country, data = sub_one)
lm_tot <- lm(ln_emissions ~ age_of_creator + age_of_recipe + type + coooking_skills, data = sub_one)
stargazer(lm_tot, type = "text")
View(recipe_type)
View(total_co2_emission)
## Are recipes becoming more/ less sustainable in time?
table_dynamics <- data.table(type = table_first_part$type, year_publication = year(table_first_part$timestamp))
View(table_dynamics)
table_dynamics <- table_dynamics[complete.cases(table_dynamics[ , "type"]),]
freq_dynamics <- data.frame(table(table_dynamics$year_publication, table_dynamics$type))
View(freq_dynamics)
names(freq_dynamics)[1] <- "Year"
names(freq_dynamics)[2] <- "Type"
freq_dynamics$Year = as.numeric(levels(freq_dynamics$Year))[freq_dynamics$Year]
ggplot(freq_dynamics, aes(x = Year, y = Freq)) +
geom_line(aes(color = Type), size = 1) +
# ylim(1000, 1400) +
# xlim(2009, 2021) +
theme_light()
ggplot(freq_dynamics, aes(x = Year, y = Freq)) +
geom_line(aes(color = Type), size = 1) +
# ylim(1000, 1400) +
xlim(2009, 2020) #+ scale_x_continuous(breaks=c(2009, 2012, 2015, 2018, 2020))
theme_light()
ggplot(freq_dynamics, aes(x = Year, y = Freq)) +
geom_line(aes(color = Type), size = 1) +
xlim(2009, 2020) + scale_x_continuous(breaks=c(2009, 2012, 2015, 2018, 2020))
theme_light()
ggplot(freq_dynamics, aes(x = Year, y = Freq)) +
geom_line(aes(color = Type), size = 1) +
scale_x_continuous(breaks=c(2009, 2012, 2015, 2018, 2020)) +
theme_light()
ggplot(sub_life, aes(x = age_in_weeks,
y = ln_emissions)) + geom_point(size=2, shape=23,
color="royalblue1", alpha = 0.8) + theme_minimal()
ggplot(table_first_part_3)+
geom_histogram(aes(x=overall_type, fill=type), bins = 8) + labs(title="Distribution of recipe types",
x="Recipe types", y = "Count") + theme_bw()
ggplot(table_first_part_2)+
geom_histogram(aes(x=cooking_level, fill=cooking_skills),
bins = 8) + labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2)+
geom_histogram(aes(x=cooking_level, fill=cooking_skills),
bins = 2) + labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2)+
geom_histogram(aes(x=cooking_level, fill=cooking_skills),
bins = 8) + labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "blue",
bins = 8) + labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "black",
bins = 8) + labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("green", "blue", "pink")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("green", "blue", "pink", "orange")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("green", "blue", "pink", "deepskyblue4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("deepskyblue1", "deepskyblue2", "deepskyblue3", "deepskyblue4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("pink", "deepskyblue2", "deepskyblue3", "deepskyblue4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("darkolivegreen1", "deepskyblue2", "deepskyblue3", "deepskyblue4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen2", "darkolivegreen3", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("darkolivegreen3", "darkolivegreen2", "darkolivegreen1", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
table_first_part$cooking_level <- sample(1:nrow(table_first_part))
table_first_part <- table_first_part %>%
mutate(cooking_level = ifelse(cooking_skills == "i) beginner", 1, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "ii) amateurchef", 2, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "iii) advanced", 3, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "iv) chefcook", 4, cooking_level))
table_first_part_2 <- table_first_part[complete.cases(table_first_part[ , "cooking_skills"]),]
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("darkolivegreen1", "darkolivegreen2", "darkolivegreen3", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
table_first_part$cooking_level <- sample(1:nrow(table_first_part))
table_first_part <- table_first_part %>%
mutate(cooking_level = ifelse(cooking_skills == "beginner", 1, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "amateurchef", 2, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "advanced", 3, cooking_level)) %>%
mutate(cooking_level = ifelse(cooking_skills == "chefcook", 4, cooking_level))
table_first_part_2 <- table_first_part[complete.cases(table_first_part[ , "cooking_skills"]),]
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("darkolivegreen3", "darkolivegreen2", "darkolivegreen1", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
# type
table_first_part$overall_type <- sample(1:nrow(table_first_part))
table_first_part <- table_first_part %>%
mutate(overall_type = ifelse(type == "vegan", 1, overall_type)) %>%
mutate(overall_type = ifelse(type == "vegetarian", 2, overall_type)) %>%
mutate(overall_type = ifelse(type == "meat", 3, overall_type))
table_first_part_3 <- table_first_part[complete.cases(table_first_part[ , "type"]),]
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "darkolivegreen", bins = 8) +
scale_fill_manual(values = c("darkolivegreen3", "darkolivegreen2", "darkolivegreen1", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_bw()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "darkolivegreen", bins = 8) +
scale_fill_manual(values = c("darkolivegreen3", "darkolivegreen2", "darkolivegreen1", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_minimal()
ggplot(table_first_part_2, aes(x=cooking_level, fill=cooking_skills)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("darkolivegreen3", "darkolivegreen2", "darkolivegreen1", "darkolivegreen4")) +
labs(title="Distribution of cooking skills",
x="Level of cooking skills", y = "Count") + theme_minimal()
ggplot(table_first_part_3, aes(x=overall_type, fill=type)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("deepbluesky1", "deepbluesky3", "deepbluesky4")) +
labs(title="Distribution of recipe types", x="Recipe types", y = "Count") + theme_bw()
ggplot(table_first_part_3, aes(x=overall_type, fill=type)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("deepskyblue1", "deepskyblue3", "deepskyblue4")) +
labs(title="Distribution of recipe types", x="Recipe types", y = "Count") + theme_bw()
ggplot(table_first_part_3, aes(x=overall_type, fill=type)) +
geom_histogram(color = "white", bins = 8) +
scale_fill_manual(values = c("deepskyblue1", "deepskyblue3", "deepskyblue4")) +
labs(title="Distribution of recipe types", x="Recipe types", y = "Count") + theme_minimal()
