# --> type extraction
recipe_ingredients_mapping$raw_type <- sample(1:nrow(recipe_ingredients_mapping))
recipe_ingredients_mapping <- recipe_ingredients_mapping %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(recipe_ingredients_mapping)[8] # raw_type
type_recipe <- unique(recipe_ingredients_mapping[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
View(type_recipe)
# --> type extraction
table_type <- recipe_ingredients_mapping[complete.cases(recipe_ingredients_mapping[ , "type"]),]
View(table_type)
recipe_ingredients_mapping$raw_type <- sample(6:nrow(recipe_ingredients_mapping))
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "meat")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == meat)
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "fish")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" OR type == "vegan" )
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" | type == "vegetarian" )
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" | type == "vegetarian" | type == "fish" | type == "meat")
View(table_type)
View(recipe_ingredients_mapping)
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" | type == "vegetarian" | type == "fish" | type == "meat")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" | type == "fish" | type == "meat")
View(table_type)
count(recipe_ingredients_mapping$type=="vegan")
recipe_ingredients_mapping %>% count(type=="vegan")
recipe_ingredients_mapping %>% count(type=="vegetarian")
recipe_ingredients_mapping %>% count(type=="meat")
recipe_ingredients_mapping %>% count(type=="fish")
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(recipe_ingredients_mapping))
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
View(recipe_type)
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
### table first part creation ###
table_first_part <- data.table(recipe_id=recipes$recipe_id)
View(table_first_part)
table_first_part <- merge(x=table_first_part, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
View(table_first_part)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "cooking_skills")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_of_creator")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=total_co2_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_rate[, c("recipe_id", "nr_adopters")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=mean_rating[, c("recipe_id", "mean_rating")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipe_comments[, c("recipe_id", "nr_comments")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_in_weeks")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "country")], by="recipe_id", all.x = TRUE)
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
# --> emission calculation
# ingredients_emissions <- rename(ingredients_emissions, clean = name)
recipe_ingredients_mapping <- merge(recipe_ingredients_mapping, ingredients_emissions, by.x="clean", by.y="name", all.x=TRUE)
recipe_ingredients_mapping$co2emissions <- as.numeric(recipe_ingredients_mapping$quantity*recipe_ingredients_mapping$emissions)
h_2 <- names (recipe_ingredients_mapping)[7]  # co2emissions
total_co2_emission <- unique(recipe_ingredients_mapping[, lapply(.SD, sum, na.rm=TRUE), by=recipe_id, .SDcols=h_2])
# --> mean rating calculation
h.1 <- names(recipes_rate)[3] # rating
mean_rating <- unique(recipes_rate[, lapply(.SD, mean, na.rm=TRUE), by=recipe_id, .SDcols=h.1])
mean_rating <- rename(mean_rating, mean_rating = rating)
# --> recipe age in weeks calculation
recipes_create <- recipes_create[, age_in_weeks :=ceiling(difftime(max(recipes_rate$timestamp), recipes_create$timestamp, units = "weeks"))]
# --> nr comments calculation
recipe_comments <- recipe_comments[, nr_comments := as.numeric(.N), by = recipe_id] # count elements
recipe_comments <- recipe_comments[!duplicated(recipe_id),]
# --> nr adopters calculation
recipes_rate <- recipes_rate[, nr_adopters := as.numeric(.N), by = recipe_id] # count elements
recipes_rate <- recipes_rate[!duplicated(recipe_id),]
# --> creator characteristics
age_of_creator_when_creating <- users[, age_of_creator := year(users$created_at) - year(users$birthday) ]
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "cooking_skills")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "age_of_creator")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "country")], by="user_id", all.x = TRUE)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
View(recipe_type)
table_first_part <- data.table(recipe_id=recipes$recipe_id)
table_first_part <- merge(x=table_first_part, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "cooking_skills")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_of_creator")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=total_co2_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_rate[, c("recipe_id", "nr_adopters")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=mean_rating[, c("recipe_id", "mean_rating")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipe_comments[, c("recipe_id", "nr_comments")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_in_weeks")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "country")], by="recipe_id", all.x = TRUE)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
library(RPostgreSQL)
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(dummies)      # it helps create dummy variables quickly
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(data.table)
library(diffusion)
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
View(recipe_ingredients_mapping)
View(ingredients_emissions)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
View(table_type)
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
h_type <- names(table_type)[6] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
recipes_rate <- merge(x=recipes_rate, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
recipes_rate <- recipes_rate[complete.cases(recipes_rate[ , "type"]),]
recipes_rate$timestamp <- substr(recipes_rate$timestamp, 0,7)
recipes_rate <- cbind(nr = 1, recipes_rate)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create")) #
recipes_rate <- data.table(dbReadTable(db, "recipes_rate")) #
recipes <- data.table(dbReadTable(db, "recipes")) #
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping")) #
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[6] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
recipes_rate <- merge(x=recipes_rate, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
recipes_rate <- recipes_rate[complete.cases(recipes_rate[ , "type"]),]
recipes_rate$timestamp <- substr(recipes_rate$timestamp, 0,7)
recipes_rate <- cbind(nr = 1, recipes_rate)
diff_final <- data.table(type = recipes_rate$type, year_month_adoption = recipes_rate$timestamp)
diff_final <- diff_final[complete.cases(diff_final[ , "type"]),]
diff_freq <- data.frame(table(diff_final$year_month_adoption, diff_final$type))
names(diff_freq)[1] <- "Month_Year"
names(diff_freq)[2] <- "Type"
select_vegan <- subset(diff_freq, diff_freq$Type == "vegan")
select_vegan[, 3] <- cumsum(select_vegan[, 3])
View(select_vegan)
select_vegetarian <- subset(diff_freq, diff_freq$Type == "vegetarian")
select_vegetarian[, 3] <- cumsum(select_vegetarian[, 3])
View(select_vegetarian)
select_pescatarian <- subset(diff_freq, diff_freq$Type == "fish")
select_pescatarian[, 3] <- cumsum(select_pescatarian[, 3])
select_omnivorous <- subset(diff_freq, diff_freq$Type == "meat")
select_omnivorous[, 3] <- cumsum(select_omnivorous[, 3])
fitbass <- diffusion(select_vegan[, 3], type = "bass")
fitbass
plot(fitbass)
fitgomp <- diffusion(select_vegan[, 3], type="gompertz")
fitgomp
plot(fitgomp)
fitgsg <- diffusion(select_vegan[, 3], type = "gsgompertz")
fitgsg
plot(fitgsg)
View(fitbass)
# dbListTables(db)
library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
library(lubridate)
library(plyr)
library(diffusion)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# Read in data
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
recipe_emission <- data.table(dbReadTable(db, "monica_recipe_emission"))
recipe_type <- data.table(dbReadTable(db, "monica_recipe_type"))
# select only the recipes we need
recipes <- recipes[recipes$category == "Main dishes - meat" | recipes$category == "Main dishes - fish"
| recipes$category == "Main dishes - others" | recipes$category == "Main dishes - vegetarian"
| recipes$category == "Pasta & rice dishes" | recipes$category == "Starters"]
recipes <- recipes[recipes$recipe_id %in% recipe_type$recipe_id,]
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
recipe_comments <- recipe_comments[recipe_comments$recipe_id %in% recipes$recipe_id,]
recipe_ingredients_mapping <- recipe_ingredients_mapping[recipe_ingredients_mapping$recipe_id %in% recipes$recipe_id,]
recipes_rate <- recipes_rate[recipes_rate$recipe_id %in% recipes$recipe_id,]
# preparation for population
temporary_table_users <- data.table(created_at = users$created_at)
temporary_table_users <- cbind(my_user = 1, temporary_table_users)
temporary_table_users$new_date <- as.Date(temporary_table_users$created_at, format="%Y-%m-%d")
tmp <- list()
tmp$y <- format(temporary_table_users$new_date, format="%Y")
tmp$w <- format(temporary_table_users$new_date, format="%W")
tmp$y[tmp$w=="00"] <- as.character(as.numeric(tmp$y[tmp$w=="00"]) - 1)
tmp$w[tmp$w=="00"] <- "52"
temporary_table_users$new_date <- paste(tmp$y, tmp$w, sep = "-")
temporary_table_users2 <- ddply(temporary_table_users, .(new_date), summarize, pop=sum(my_user))
temporary_table_users2$cumsum_users <- cumsum(temporary_table_users2$pop)
temporary_table_users2$period <- seq(from = 1, to = nrow(temporary_table_users2))
### WORKS BECAUSE the number of periods is the same as for the oldest recipe == 2606
### WORKS BECAUSE the final population is equal to the nr of users == 329209
# select only the recipes we need and add column of 1s (reference for adopters, rate and comments)
recipes_create <- cbind(starting_week = 1, recipes_create)
recipes_create <- cbind(end = max(recipes_rate$timestamp), recipes_create)
recipes_create$timestamp <- as.Date(recipes_create$timestamp)
recipes_create$end <- as.Date(recipes_create$end)
# add calendar week of creation for every recipe
add_calendar_week <- function(table_for_calendar_week) {
Calendar_week <- as.numeric(strftime(table_for_calendar_week$timestamp, format = "%W"))
result <- cbind(table_for_calendar_week, Calendar_week)
return(result)
}
recipes_create <- add_calendar_week(recipes_create)
# add weeks of life for every recipe
add_life_time_to_table <- function(table_to_add) {
life_in_weeks <- ceiling(difftime(max(recipes_rate$timestamp), table_to_add$timestamp, units = "weeks"))
result <- cbind(table_to_add, life_in_weeks)
return(result)
}
recipes_create <- add_life_time_to_table(recipes_create)
### TABLE CONSTRUCTION ###
create_table_for_recipe <- function(row_to_calculate) {
n_weeks <- row_to_calculate$life_in_weeks # for every row, take the life in weeks
id_col <- replicate(n_weeks, row_to_calculate$recipe_id) # for every row in recipes_create, print the recipe_id for life_in_weeks time
data.table(
"RECIPE ID" = id_col,
period_in_weeks = seq(from = 1, to = n_weeks),
calendar_week = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%U"),
year = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%Y"),
total_adopters = calculate_adopters(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
mean_rate = calculate_mean(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
nr_comments = calculate_comments(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
population_size = as.numeric(tail(temporary_table_users2$cumsum_users, as.numeric(n_weeks)))
)
}
final_table <- data.table(
"RECIPE ID" = numeric(),
period_in_weeks = numeric(),
calendar_week = numeric(),
year = numeric(),
total_adopters = numeric(),
mean_rate = numeric(),
nr_comments = numeric(),
population_size = numeric()
)
## *** creation of the link to the specific period in which I have to add a new adopter
# nrow = total adopters, week = period in which adopted
# --> calculation of the nr. of adopters
calculate_adopters <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
adopters_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_adoption <- ceiling(difftime(adopters_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe until the rate has been given (for every rate)
adopters_of_rec <- cbind(adopters_of_rec, week_adoption) # add column with life (in weeks) for every rate to the subset
adoption_by_week <- 0
count_adoption <- 0
end_week <- start_week + n_weeks # total number of weeks ~ the life
for (week in start_week:end_week) { # start_week = column created above (~ starting_week)
partial_count <- nrow(filter(adopters_of_rec, adopters_of_rec$week_adoption == week)) # *** returns cumulated number of rows = nr of rates per recipe = nr of adopters
count_adoption <- count_adoption + partial_count # gives total adopters
adoption_by_week[week - start_week] <- count_adoption # tell at which week in the life (~period) you print a new adopter
}
return(adoption_by_week)
}
# --> calculation of the mean rate
calculate_mean <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
rates_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_rate_created <- ceiling(difftime(rates_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe, until the rate (for every rate)
rates_of_rec <- cbind(rates_of_rec, week_rate_created) # add column with life (in weeks) for every rate
rate_by_week <- 0
end_week <- start_week + n_weeks # start_week is the column with all 1s created before (--> starting_week)
n_rate <- 0
total_sum_rate <- 0
avg <- 0
for (week in start_week:end_week) {
rate_of_week <- rates_of_rec[rates_of_rec$week_rate_created == week,]
if (nrow(rate_of_week) > 0) {
n_rate <- n_rate + nrow(rate_of_week) # calculate the total number of rates as 0 (n_rate) + nr of rows in the subset l-130
total_sum_rate <- total_sum_rate + sum(rate_of_week$rating)
avg <- total_sum_rate / n_rate
}
rate_by_week[week - start_week] <- avg
}
return(rate_by_week)
}
# --> calculation of nr. of comments
calculate_comments <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
comments_of_rec <- recipe_comments[recipe_comments$recipe_id == single_recipe,]
week_comment_created <- ceiling(difftime(comments_of_rec$created_at, creation_timestamp, units = "weeks"))
comments_of_rec <- cbind(comments_of_rec, week_comment_created)
comments_by_week <- 0
count_comment <- 0
end_week <- start_week + n_weeks
for (week in start_week:end_week) {
partial_count <- nrow(filter(comments_of_rec, comments_of_rec$week_comment_created == week))
count_comment <- count_comment + partial_count
comments_by_week[week - start_week] <- count_comment
}
return(comments_by_week)
}
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
dbWriteTable(db, "monica_aggregated_diffusion",  final_table, row.names=FALSE)
### DIFFUSION ###
final_table <- final_table[final_table$total_adopters != 0, ] # necessary, otherwise recipes with 0 final adopters will mess with the code
final_table <- as.data.frame(final_table)
my_recipe_id <- data.table(recipe_id = unique(final_table$`RECIPE ID`), nr = 1:length(unique(final_table$`RECIPE ID`)))
# --> fitbass
final_diff <- data.table(
V1 = numeric(),
V2 = numeric(),
V3 = numeric()
)
for (i in unique(final_table$`RECIPE ID`)) {
fitbass <- diffusion(final_table[final_table$`RECIPE ID`== i, 5], type = "bass")
new_fitbass <- data.table(matrix(fitbass$w, nrow = 1))
final_diff <- rbind(final_diff, new_fitbass, fill=TRUE)
}
final_diff$nr <- 1:length(unique(final_table$`RECIPE ID`))
final_diff <- merge(final_diff, my_recipe_id, by="nr")
final_diff <- merge(final_diff, recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
final_diff <- merge(final_diff, recipe_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
names(final_diff)[3] <- "fitbass_p"
names(final_diff)[4] <- "fitbass_q"
names(final_diff)[5] <- "fitbass_m"
final_diff <- final_diff[, c(2, 1, 6, 7, 3, 4, 5)]
# --> fitgomp
final_fitgomp <- data.table(
V1 = numeric(),
V2 = numeric(),
V3 = numeric()
)
for (i in unique(final_table$`RECIPE ID`)) {
fitgomp <- diffusion(final_table[final_table$`RECIPE ID`== i, 5], type = "gompertz")
new_fitgomp <- data.table(matrix(fitgomp$w, nrow = 1))
final_fitgomp <- rbind(final_fitgomp, new_fitgomp, fill=TRUE)
}
final_fitgomp$nr <- 1:length(unique(final_table$`RECIPE ID`))
names(final_fitgomp)[1] <- "fitgomp_a"
names(final_fitgomp)[2] <- "fitgomp_b"
names(final_fitgomp)[3] <- "fitgomp_m"
final_diff <- merge(final_diff, final_fitgomp, by="nr")
# --> fitgsg
final_fitgsg <- data.table(
V1 = numeric(),
V2 = numeric(),
V3 = numeric(),
V4 = numeric()
)
for (i in unique(final_table$`RECIPE ID`)) {
fitgsg <- diffusion(final_table[final_table$`RECIPE ID`== i, 5], type = "gsgompertz")
new_fitgsg <- data.table(matrix(fitgsg$w, nrow = 1))
final_fitgsg <- rbind(final_fitgsg, new_fitgsg, fill=TRUE)
}
final_fitgsg$nr <- 1:length(unique(final_table$`RECIPE ID`))
names(final_fitgsg)[1] <- "fitgsg_a"
names(final_fitgsg)[2] <- "fitgsg_b"
names(final_fitgsg)[3] <- "fitgsg_c"
names(final_fitgsg)[4] <- "fitgsg_m"
final_diff <- merge(final_diff, final_fitgsg, by="nr")
# dbWriteTable(db, "monica_diffusion",  final_diff, row.names=FALSE)
View(final_diff)
