}
aa_new_new = aa_function(aa_mydata$recipe_id)
aa_new_2 <- data.table(aa_new_new)
View(aa_new)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat"){
aa_mydata$class<- "meat"
} else {
aa_mydata$class <- "else"
}
}
aa_new_new = aa_function(aa_mydata$recipe_id)
aa_final_table <- data.table(
aa_new_new = numeric()
)
View(aa_new)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat"){
aa_mydata$class<- "meat"
} else {
aa_mydata$class <- "else"
}
}
aa_new_new <- aa_function(aa_mydata$recipe_id)
View(aa_mydata)
View(aa_mydata)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]}
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat") {
aa_mydata$class<- "meat"
else
aa_mydata$class <- "else"
}
}
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
View(aa_mydata)
View(aa_mydata)
aa_mydata.1 <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata.1 <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
View(aa_mydata.1)
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
h.aa <- names(aa_mydata)[2] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
View(aa_first)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
h.aa <- names(aa_mydata)[3] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
View(aa_first)
aa_mydata <- data.table(recipe_id=c("a", "b", "c","a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b","c", "d", "e", "c", "d", "e"), type=c("meat","fish", "vegetarian","fish", "vegetarian","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
h.aa <- names(aa_mydata)[3] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
aa_mydata <- data.table(recipe_id=c("a", "b", "c","a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b","c", "d", "e", "c", "d", "e"), type=c("fish", "vegetarian","fish", "vegetarian","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat","fish"))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
h.aa <- names(aa_mydata)[3] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
aa_mydata <- data.table(recipe_id=c("a", "b", "f","c","a","f", "b", "c", "d", "e","a", "b", "c", "f","d",
"e","a", "b","c","f", "d","f", "e", "c", "d", "e"), type=c("vegan", "fish", "vegan","vegetarian","vegan","fish", "vegan","vegetarian","fish","vegan", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat","fish"))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
h.aa <- names(aa_mydata)[3] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
aa_mydata <- data.table(recipe_id=c("a", "b", "f","c","a","f", "b", "c", "d", "e","a", "b", "c", "f","d",
"e","a", "b","c","f", "d","f", "e", "c", "d", "e"), type=c("vegan", "fish", "vegan","vegetarian","vegan","fish", "vegan","vegetarian","fish","vegan", "vegetarian", "vegan","vegan", "vegetarian", "vegetarian", "vegan","fish", "fish", "vegetarian", "vegan","vegan", "vegetarian","meat","fish"))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
h.aa <- names(aa_mydata)[3] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
aa_new <- aa_mydata %>%
group_by(recipe_id) %>%
nest()
View(aa_new)
View(aa_new[[2]][[1]])
View(aa_new[[2]][[2]])
View(aa_new[[2]][[3]])
View(aa_new[[2]][[4]])
View(aa_new[[2]][[5]])
View(aa_new[[2]][[5]])
View(aa_new[[2]][[6]])
View(aa_new[[2]][[6]])
aa_mydata <- data.table(recipe_id=c("a", "b", "f","c","a","f", "b", "c", "d", "e","a", "b", "c", "f","d",
"e","a", "b","c","f", "d","f", "e", "c", "d", "e"),
type=c("vegan", "fish", "vegan","vegetarian","vegan","vegan", "vegan",
"vegetarian","vegan","vegan", "vegetarian", "vegan","vegan", "vegetarian",
"vegetarian", "vegan","vegan", "fish", "vegetarian", "vegan","vegan",
"vegetarian","meat","fish"))
aa_mydata$aa_type <- sample(1:nrow(aa_mydata))
aa_mydata <- aa_mydata %>%
mutate(aa_type = ifelse(type == "meat", 4, aa_type)) %>%
mutate(aa_type = ifelse(type == "fish", 3, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegetarian", 2, aa_type)) %>%
mutate(aa_type = ifelse(type == "vegan", 1, aa_type))
h.aa <- names(aa_mydata)[3] # type
aa_first <- unique(aa_mydata[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h.aa])
aa_new <- aa_mydata %>%
group_by(recipe_id) %>%
nest()
View(aa_new[[2]][[6]])
View(aa_new[[2]][[1]])
View(aa_new[[2]][[2]])
View(aa_new[[2]][[3]])
View(aa_new[[2]][[4]])
aa_first$recipe_type <- sample(1:nrow(aa_first))
View(aa_first)
aa_first <- aa_first %>%
mutate(recipe_type = ifelse(type ==  4,"meat", recipe_type)) %>%
mutate(recipe_type = ifelse(type ==  3 , "fish",  recipe_type)) %>%
mutate(recipe_type = ifelse(type == 2, "vegetarian", recipe_type)) %>%
mutate(recipe_type = ifelse(type ==  1,"vegan", recipe_type))
aa_first <- aa_first %>%
mutate(recipe_type = ifelse(aa_type ==  4,"meat", recipe_type)) %>%
mutate(recipe_type = ifelse(aa_type ==  3 , "fish",  recipe_type)) %>%
mutate(recipe_type = ifelse(aa_type == 2, "vegetarian", recipe_type)) %>%
mutate(recipe_type = ifelse(aa_type ==  1,"vegan", recipe_type))
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# upload tables of interest
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
recipe_ingredients_mapping <- merge(recipe_ingredients_mapping, ingredients_emissions, by.x="clean", by.y="name", all.x=TRUE)
recipe_ingredients_mapping$co2emissions <- as.numeric(recipe_ingredients_mapping$quantity*recipe_ingredients_mapping$emissions)
h_2 <- names (recipe_ingredients_mapping)[7]  # co2emissions
total_co2_emission <- unique(recipe_ingredients_mapping[, lapply(.SD, sum, na.rm=TRUE), by=recipe_id, .SDcols=h_2])
# --> mean rating calculation
h.1 <- names(recipes_rate)[3] # rating
mean_rating <- unique(recipes_rate[, lapply(.SD, mean, na.rm=TRUE), by=recipe_id, .SDcols=h.1])
mean_rating <- rename(mean_rating, mean_rating = rating)
# --> recipe age in weeks calculation
recipes_create <- recipes_create[, age_in_weeks :=ceiling(difftime(max(recipes_rate$timestamp), recipes_create$timestamp, units = "weeks"))]
# --> nr comments calculation
recipe_comments <- recipe_comments[, nr_comments := as.numeric(.N), by = recipe_id] # count elements
recipe_comments <- recipe_comments[!duplicated(recipe_id),]
# --> nr adopters calculation
recipes_rate <- recipes_rate[, nr_adopters := as.numeric(.N), by = recipe_id] # count elements
recipes_rate <- recipes_rate[!duplicated(recipe_id),]
# --> creator characteristics
age_of_creator_when_creating <- users[, age_of_creator := year(users$created_at) - year(users$birthday) ]
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "cooking_skills")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "age_of_creator")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "country")], by="user_id", all.x = TRUE)
View(recipe_ingredients_mapping)
# --> type extraction
recipe_ingredients_mapping$raw_type <- sample(1:nrow(recipe_ingredients_mapping))
recipe_ingredients_mapping <- recipe_ingredients_mapping %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(recipe_ingredients_mapping)[8] # raw_type
type_recipe <- unique(recipe_ingredients_mapping[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
View(type_recipe)
# --> type extraction
table_type <- recipe_ingredients_mapping[complete.cases(recipe_ingredients_mapping[ , "type"]),]
View(table_type)
recipe_ingredients_mapping$raw_type <- sample(6:nrow(recipe_ingredients_mapping))
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "meat")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == meat)
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "fish")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" OR type == "vegan" )
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" | type == "vegetarian" )
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" | type == "vegetarian" | type == "fish" | type == "meat")
View(table_type)
View(recipe_ingredients_mapping)
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% filter(type == "vegan" | type == "vegetarian" | type == "fish" | type == "meat")
View(table_type)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" | type == "fish" | type == "meat")
View(table_type)
count(recipe_ingredients_mapping$type=="vegan")
recipe_ingredients_mapping %>% count(type=="vegan")
recipe_ingredients_mapping %>% count(type=="vegetarian")
recipe_ingredients_mapping %>% count(type=="meat")
recipe_ingredients_mapping %>% count(type=="fish")
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(recipe_ingredients_mapping))
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
View(recipe_type)
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
### table first part creation ###
table_first_part <- data.table(recipe_id=recipes$recipe_id)
View(table_first_part)
table_first_part <- merge(x=table_first_part, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
View(table_first_part)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "cooking_skills")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_of_creator")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=total_co2_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_rate[, c("recipe_id", "nr_adopters")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=mean_rating[, c("recipe_id", "mean_rating")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipe_comments[, c("recipe_id", "nr_comments")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_in_weeks")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "country")], by="recipe_id", all.x = TRUE)
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
# --> emission calculation
# ingredients_emissions <- rename(ingredients_emissions, clean = name)
recipe_ingredients_mapping <- merge(recipe_ingredients_mapping, ingredients_emissions, by.x="clean", by.y="name", all.x=TRUE)
recipe_ingredients_mapping$co2emissions <- as.numeric(recipe_ingredients_mapping$quantity*recipe_ingredients_mapping$emissions)
h_2 <- names (recipe_ingredients_mapping)[7]  # co2emissions
total_co2_emission <- unique(recipe_ingredients_mapping[, lapply(.SD, sum, na.rm=TRUE), by=recipe_id, .SDcols=h_2])
# --> mean rating calculation
h.1 <- names(recipes_rate)[3] # rating
mean_rating <- unique(recipes_rate[, lapply(.SD, mean, na.rm=TRUE), by=recipe_id, .SDcols=h.1])
mean_rating <- rename(mean_rating, mean_rating = rating)
# --> recipe age in weeks calculation
recipes_create <- recipes_create[, age_in_weeks :=ceiling(difftime(max(recipes_rate$timestamp), recipes_create$timestamp, units = "weeks"))]
# --> nr comments calculation
recipe_comments <- recipe_comments[, nr_comments := as.numeric(.N), by = recipe_id] # count elements
recipe_comments <- recipe_comments[!duplicated(recipe_id),]
# --> nr adopters calculation
recipes_rate <- recipes_rate[, nr_adopters := as.numeric(.N), by = recipe_id] # count elements
recipes_rate <- recipes_rate[!duplicated(recipe_id),]
# --> creator characteristics
age_of_creator_when_creating <- users[, age_of_creator := year(users$created_at) - year(users$birthday) ]
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "cooking_skills")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "age_of_creator")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "country")], by="user_id", all.x = TRUE)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
View(recipe_type)
table_first_part <- data.table(recipe_id=recipes$recipe_id)
table_first_part <- merge(x=table_first_part, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "cooking_skills")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_of_creator")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=total_co2_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_rate[, c("recipe_id", "nr_adopters")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=mean_rating[, c("recipe_id", "mean_rating")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipe_comments[, c("recipe_id", "nr_comments")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_in_weeks")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "country")], by="recipe_id", all.x = TRUE)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
library(RPostgreSQL)
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(dummies)      # it helps create dummy variables quickly
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(data.table)
library(diffusion)
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
View(recipe_ingredients_mapping)
View(ingredients_emissions)
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
View(table_type)
h_type <- names(table_type)[8] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
h_type <- names(table_type)[6] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
recipes_rate <- merge(x=recipes_rate, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
recipes_rate <- recipes_rate[complete.cases(recipes_rate[ , "type"]),]
recipes_rate$timestamp <- substr(recipes_rate$timestamp, 0,7)
recipes_rate <- cbind(nr = 1, recipes_rate)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_create <- data.table(dbReadTable(db, "recipes_create")) #
recipes_rate <- data.table(dbReadTable(db, "recipes_rate")) #
recipes <- data.table(dbReadTable(db, "recipes")) #
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping")) #
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
# --> type extraction
table_type <- recipe_ingredients_mapping %>% subset(type == "vegan" | type == "vegetarian" |
type == "fish" | type == "meat")
table_type$raw_type <- sample(1:nrow(table_type))
table_type <- table_type %>%
mutate(raw_type = ifelse(type == "meat", 4, raw_type)) %>%
mutate(raw_type = ifelse(type == "fish", 3, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegetarian", 2, raw_type)) %>%
mutate(raw_type = ifelse(type == "vegan", 1, raw_type))
h_type <- names(table_type)[6] # raw_type
recipe_type <- unique(table_type[, lapply(.SD, max, na.rm=TRUE), by=recipe_id, .SDcols=h_type])
recipe_type$type <- sample(1:nrow(recipe_type))
recipe_type <- recipe_type %>%
mutate(type = ifelse(raw_type ==  4,"meat", type)) %>%
mutate(type = ifelse(raw_type ==  3 , "fish",  type)) %>%
mutate(type = ifelse(raw_type == 2, "vegetarian", type)) %>%
mutate(type = ifelse(raw_type ==  1,"vegan", type))
recipes_rate <- merge(x=recipes_rate, y=recipe_type[, c("recipe_id", "type")], by="recipe_id", all.x = TRUE)
recipes_rate <- recipes_rate[complete.cases(recipes_rate[ , "type"]),]
recipes_rate$timestamp <- substr(recipes_rate$timestamp, 0,7)
recipes_rate <- cbind(nr = 1, recipes_rate)
diff_final <- data.table(type = recipes_rate$type, year_month_adoption = recipes_rate$timestamp)
diff_final <- diff_final[complete.cases(diff_final[ , "type"]),]
diff_freq <- data.frame(table(diff_final$year_month_adoption, diff_final$type))
names(diff_freq)[1] <- "Month_Year"
names(diff_freq)[2] <- "Type"
select_vegan <- subset(diff_freq, diff_freq$Type == "vegan")
select_vegan[, 3] <- cumsum(select_vegan[, 3])
View(select_vegan)
select_vegetarian <- subset(diff_freq, diff_freq$Type == "vegetarian")
select_vegetarian[, 3] <- cumsum(select_vegetarian[, 3])
View(select_vegetarian)
select_pescatarian <- subset(diff_freq, diff_freq$Type == "fish")
select_pescatarian[, 3] <- cumsum(select_pescatarian[, 3])
select_omnivorous <- subset(diff_freq, diff_freq$Type == "meat")
select_omnivorous[, 3] <- cumsum(select_omnivorous[, 3])
fitbass <- diffusion(select_vegan[, 3], type = "bass")
fitbass
plot(fitbass)
fitgomp <- diffusion(select_vegan[, 3], type="gompertz")
fitgomp
plot(fitgomp)
fitgsg <- diffusion(select_vegan[, 3], type = "gsgompertz")
fitgsg
plot(fitgsg)
View(fitbass)
