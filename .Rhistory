library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
# Define connection parameters
source("conf.R")
# upload tables of interest
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
library(RPostgreSQL)
library(readxl)       # excel files reader
library(foreign)      # necessary to import datasets in formats like .dta (STATA) etc.
library(dplyr)        # ! many useful functions for quick data manipulation
library(tidyr)        # designed specifically for data tidying
library(ggplot2)      # (probably) most common package to produce graphs
library(stargazer)    # best way to export tables in LaTex format
library(haven)        # good alternative to "foreign", to read STATA/Sas/Spss data
library(dummies)      # it helps create dummy variables quickly
library(Hmisc)        # some useful functions for e.g. renaming variables
library(lmtest)       # great to test linear regression models
library(sandwich)     # produces robust standard errors
library(doBy)         # good to produce statistics by group
library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
# Define connection parameters
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# upload tables of interest
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
ingredients_emissions <- data.table(dbReadTable(db, "ingredients_emissions"))
# --> emission calculation
# ingredients_emissions <- rename(ingredients_emissions, clean = name)
recipe_ingredients_mapping <- merge(recipe_ingredients_mapping, ingredients_emissions, by.x="clean", by.y="name", all.x=TRUE)
recipe_ingredients_mapping$co2emissions <- as.numeric(recipe_ingredients_mapping$quantity*recipe_ingredients_mapping$emissions)
h_2 <- names (recipe_ingredients_mapping)[7]  # co2emissions
total_co2_emission <- unique(recipe_ingredients_mapping[, lapply(.SD, sum, na.rm=TRUE), by=recipe_id, .SDcols=h_2])
# --> mean rating calculation
h.1 <- names(recipes_rate)[3] # rating
mean_rating <- unique(recipes_rate[, lapply(.SD, mean, na.rm=TRUE), by=recipe_id, .SDcols=h.1])
View(mean_rating)
mean_rating <- rename(mean_rating, mean_rating = rating)
# --> recipe age in weeks calculation
recipes_create <- recipes_create[, age_in_weeks :=ceiling(difftime(max(recipes_rate$timestamp), recipes_create$timestamp, units = "weeks"))]
# --> nr comments calculation
recipe_comments <- recipe_comments[, nr_comments := as.numeric(.N), by = recipe_id] # count elements
recipe_comments <- recipe_comments[!duplicated(recipe_id),]
# --> nr adopters calculation
recipes_rate <- recipes_rate[, nr_adopters := as.numeric(.N), by = recipe_id] # count elements
recipes_rate <- recipes_rate[!duplicated(recipe_id),]
# --> creator characteristics
age_of_creator_when_creating <- users[, age_of_creator := year(users$created_at) - year(users$birthday) ]
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "cooking_skills")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "age_of_creator")], by="user_id", all.x = TRUE)
recipes_create <- merge(x=recipes_create, y=users[, c("user_id", "country")], by="user_id", all.x = TRUE)
### table first part creation ###
table_first_part <- data.table(recipe_id=recipes$recipe_id,
type=recipes$type)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "cooking_skills")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_of_creator")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=total_co2_emission[, c("recipe_id", "co2emissions")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_rate[, c("recipe_id", "nr_adopters")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=mean_rating[, c("recipe_id", "mean_rating")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipe_comments[, c("recipe_id", "nr_comments")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "age_in_weeks")], by="recipe_id", all.x = TRUE)
table_first_part <- merge(x=table_first_part, y=recipes_create[, c("recipe_id", "country")], by="recipe_id", all.x = TRUE)
View(table_first_part)
View(recipes)
View(ingredients_emissions)
View(recipe_ingredients_mapping)
mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish"))
mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
View(mydata)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
if(x=="meat"){
print("my_meat")
}
for(i in 1:length(aa_mydata)){
aa_new_type[i] <- nchar(aa_mydata[i])
}
aa_new_type <- c()
for(i in 1:length(aa_mydata)){
aa_new_type[i] <- nchar(aa_mydata[i])
}
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"}
if(aa_mydata$type[i]=="fish"&aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"}
if(aa_mydata$type[i]=="vegetarian"&aa_mydata$type!="meat"&aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"}
if(aa_mydata$type[i]=="vegan"&aa_mydata$type!="meat"&aa_mydata$type!="fish"&aa_mydata$type!="vegetarian"){
aa_mydata$class[i] <- "vegan"}
}
View(aa_mydata)
warnings()
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"}
else if(aa_mydata$type[i]=="fish"&aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"}
else if(aa_mydata$type[i]=="vegetarian"&aa_mydata$type!="meat"&aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"}
else if(aa_mydata$type[i]=="vegan"&aa_mydata$type!="meat"&aa_mydata$type!="fish"&aa_mydata$type!="vegetarian"){
aa_mydata$class[i] <- "vegan"}
}
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"
} else if(aa_mydata$type[i]=="fish"&aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"
} else if(aa_mydata$type[i]=="vegetarian"&aa_mydata$type!="meat"&aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"
} else {
aa_mydata$class[i] <- "vegan"}
}
warnings()
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"
} else if(aa_mydata$type[i]=="fish"&aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"
} else if(aa_mydata$type[i]=="vegetarian"&aa_mydata$type!="meat"&aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"
} else {
aa_mydata$class[i] <- "vegan"}
}
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"
} else if(aa_mydata$type[i]=="fish" AND aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"
} else if(aa_mydata$type[i]=="vegetarian" AND aa_mydata$type!="meat" AND aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"
} else {
aa_mydata$class[i] <- "vegan"}
}
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"
} else if(aa_mydata$type[i]=="fish" AND aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"
} else if(aa_mydata$type[i]=="vegetarian" AND aa_mydata$type!="meat" AND aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"
} else {
aa_mydata$class[i] <- "vegan"}
}
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"
} else if(aa_mydata$type[i]=="fish" AND aa_mydata$type!="meat"){
aa_mydata$class[i] <- "fish"
} else if(aa_mydata$type[i]=="vegetarian" AND aa_mydata$type!="meat" AND aa_mydata$type!="fish"){
aa_mydata$class[i] <- "vegetarian"
} else {
aa_mydata$class[i] <- "vegan"
}
for(i in 1:nrow(aa_mydata)){
if(aa_mydata$type[i]=="meat"){
aa_mydata$class[i] <- "meat"
} else if(aa_mydata$type[i]=="fish" AND aa_mydata$type[i]!="meat"){
aa_mydata$class[i] <- "fish"
} else if(aa_mydata$type[i]=="vegetarian" AND aa_mydata$type[i]!="meat" AND aa_mydata$type[i]!="fish"){
aa_mydata$class[i] <- "vegetarian"
} else {
aa_mydata$class[i] <- "vegan"
}
df.l <- data.frame(k1 = c(0,0,3,4,5,1),
k2 = c(1,0,0,4,5,0),
k3 = c(0,0,0,8,0,0),
k4 = c(2,5,0,3,4,5))
View(df.l)
df.final<-data.frame(k1 = c(0,0,3,4,5,1),
k2 = c(1,0,0,4,5,0),
k3 = c(0,0,0,8,0,0),
k4 = c(2,5,0,3,4,5),
Category = c("k2_k4","k4","k1","k1_k2_k3_k4","k1_k2_k4","k1_k4"))
View(df.final)
aa_mydata <- group_by(aa_mydata$recipe_id)
aa_mydata <- group_by(aa_mydata$recipe_id)
aa_mydata %>%
group_by(recipe_id)
aa_new <- aa_mydata %>%
group_by(recipe_id)
View(aa_new)
aa_new <- aa_mydata %>%
group_by(recipe_id) %>%
nest()
View(aa_new[[2]][[1]])
View(aa_new[[2]][[1]])
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_new <- aa_mydata %>%
group_by(recipe_id) %>%
nest()
View(aa_new[[2]][[1]])
View(ingredients_emissions)
View(recipe_ingredients_mapping)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat"){
aa_mydata$class<- "meat"
} else {
aa_mydata$class <- "else"
}
}
aa_new_new = aa_function(aa_mydata$recipe_id)
View(aa_new)
View(aa_new)
View(aa_new)
View(aa_new)
View(aa_new)
aa_new_new <- data.table(aa_new_new)
View(aa_new)
View(aa_new)
View(aa_new)
aa_new_new <- data.table(aa_new_new)
print(aa_new_new)
aa_new_new <- data.table(aa_new_new)
aa_new_new = aa_function(aa_mydata$recipe_id)
aa_new_2 <- data.table(aa_new_new)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat"){
aa_mydata$class<- "meat"
} else {
aa_mydata$class <- "else"
}
}
aa_new_new = aa_function(aa_mydata$recipe_id)
aa_new_2 <- data.table(aa_new_new)
View(aa_new)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat"){
aa_mydata$class<- "meat"
} else {
aa_mydata$class <- "else"
}
}
aa_new_new = aa_function(aa_mydata$recipe_id)
aa_final_table <- data.table(
aa_new_new = numeric()
)
View(aa_new)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat"){
aa_mydata$class<- "meat"
} else {
aa_mydata$class <- "else"
}
}
aa_new_new <- aa_function(aa_mydata$recipe_id)
View(aa_mydata)
View(aa_mydata)
aa_mydata <- data.table(recipe_id=c("a", "b", "c", "d", "e","a", "b", "c", "d",
"e","a", "b", "c", "d", "e"), type=c("meat","fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish", "vegetarian", "vegan","meat", "fish","meat"))
aa_function <- function(unique_recipe){
aa_unique <- aa_mydata[aa_mydata$recipe_id == unique_recipe,]}
for(aa_unique in 1:nrow(aa_mydata)){
if(aa_unique$type=="meat") {
aa_mydata$class<- "meat"
else
aa_mydata$class <- "else"
}
}
