library(multiwayvcov) # estimators for clustered standard errors
library(car)          # nice estimation and post-estimation commands
library(stringr)      # ! great for character variables manipulation
library(datasets)     # package containing many datasets
library(purrr)        # enhanced features to deal with vectors and functions
library(vtable)       # nice package for producing tables
library(data.table)
library(lubridate)
library(plyr)
library(diffusion)
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# Read in data
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
recipe_emission <- data.table(dbReadTable(db, "monica_recipe_emission"))
recipe_type <- data.table(dbReadTable(db, "monica_recipe_type"))
# select only the recipes we need
recipes <- recipes[recipes$category == "Main dishes - meat" | recipes$category == "Main dishes - fish"
| recipes$category == "Main dishes - others" | recipes$category == "Main dishes - vegetarian"
| recipes$category == "Pasta & rice dishes" | recipes$category == "Starters"]
recipes <- recipes[recipes$recipe_id %in% recipe_type$recipe_id,]
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
recipe_comments <- recipe_comments[recipe_comments$recipe_id %in% recipes$recipe_id,]
recipe_ingredients_mapping <- recipe_ingredients_mapping[recipe_ingredients_mapping$recipe_id %in% recipes$recipe_id,]
recipes_rate <- recipes_rate[recipes_rate$recipe_id %in% recipes$recipe_id,]
# preparation for population
temporary_table_users <- data.table(created_at = users$created_at)
temporary_table_users <- cbind(my_user = 1, temporary_table_users)
temporary_table_users$new_date <- as.Date(temporary_table_users$created_at, format="%Y-%m-%d")
tmp <- list()
tmp$y <- format(temporary_table_users$new_date, format="%Y")
tmp$w <- format(temporary_table_users$new_date, format="%W")
tmp$y[tmp$w=="00"] <- as.character(as.numeric(tmp$y[tmp$w=="00"]) - 1)
tmp$w[tmp$w=="00"] <- "52"
temporary_table_users$new_date <- paste(tmp$y, tmp$w, sep = "-")
temporary_table_users2 <- ddply(temporary_table_users, .(new_date), summarize, pop=sum(my_user))
temporary_table_users2$cumsum_users <- cumsum(temporary_table_users2$pop)
temporary_table_users2$period <- seq(from = 1, to = nrow(temporary_table_users2))
### WORKS BECAUSE the number of periods is the same as for the oldest recipe == 2606
### WORKS BECAUSE the final population is equal to the nr of users == 329209
# select only the recipes we need and add column of 1s (reference for adopters, rate and comments)
recipes_create <- cbind(starting_week = 1, recipes_create)
recipes_create <- cbind(end = max(recipes_rate$timestamp), recipes_create)
recipes_create$timestamp <- as.Date(recipes_create$timestamp)
recipes_create$end <- as.Date(recipes_create$end)
# add calendar week of creation for every recipe
add_calendar_week <- function(table_for_calendar_week) {
Calendar_week <- as.numeric(strftime(table_for_calendar_week$timestamp, format = "%W"))
result <- cbind(table_for_calendar_week, Calendar_week)
return(result)
}
recipes_create <- add_calendar_week(recipes_create)
# add weeks of life for every recipe
add_life_time_to_table <- function(table_to_add) {
life_in_weeks <- ceiling(difftime(max(recipes_rate$timestamp), table_to_add$timestamp, units = "weeks"))
result <- cbind(table_to_add, life_in_weeks)
return(result)
}
recipes_create <- add_life_time_to_table(recipes_create)
### TABLE CONSTRUCTION ###
create_table_for_recipe <- function(row_to_calculate) {
n_weeks <- row_to_calculate$life_in_weeks # for every row, take the life in weeks
id_col <- replicate(n_weeks, row_to_calculate$recipe_id) # for every row in recipes_create, print the recipe_id for life_in_weeks time
data.table(
"RECIPE ID" = id_col,
period_in_weeks = seq(from = 1, to = n_weeks),
calendar_week = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%U"),
year = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%Y"),
total_adopters = calculate_adopters(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
mean_rate = calculate_mean(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
nr_comments = calculate_comments(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
population_size = as.numeric(tail(temporary_table_users2$cumsum_users, as.numeric(n_weeks)))
)
}
final_table <- data.table(
"RECIPE ID" = numeric(),
period_in_weeks = numeric(),
calendar_week = numeric(),
year = numeric(),
total_adopters = numeric(),
mean_rate = numeric(),
nr_comments = numeric(),
population_size = numeric()
)
## *** creation of the link to the specific period in which I have to add a new adopter
# nrow = total adopters, week = period in which adopted
# --> calculation of the nr. of adopters
calculate_adopters <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
adopters_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_adoption <- ceiling(difftime(adopters_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe until the rate has been given (for every rate)
adopters_of_rec <- cbind(adopters_of_rec, week_adoption) # add column with life (in weeks) for every rate to the subset
adoption_by_week <- 0
count_adoption <- 0
end_week <- start_week + n_weeks # total number of weeks ~ the life
for (week in start_week:end_week) { # start_week = column created above (~ starting_week)
partial_count <- nrow(filter(adopters_of_rec, adopters_of_rec$week_adoption == week)) # *** returns cumulated number of rows = nr of rates per recipe = nr of adopters
count_adoption <- count_adoption + partial_count # gives total adopters
adoption_by_week[week - start_week] <- count_adoption # tell at which week in the life (~period) you print a new adopter
}
return(adoption_by_week)
}
# --> calculation of the mean rate
calculate_mean <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
rates_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_rate_created <- ceiling(difftime(rates_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe, until the rate (for every rate)
rates_of_rec <- cbind(rates_of_rec, week_rate_created) # add column with life (in weeks) for every rate
rate_by_week <- 0
end_week <- start_week + n_weeks # start_week is the column with all 1s created before (--> starting_week)
n_rate <- 0
total_sum_rate <- 0
avg <- 0
for (week in start_week:end_week) {
rate_of_week <- rates_of_rec[rates_of_rec$week_rate_created == week,]
if (nrow(rate_of_week) > 0) {
n_rate <- n_rate + nrow(rate_of_week) # calculate the total number of rates as 0 (n_rate) + nr of rows in the subset l-130
total_sum_rate <- total_sum_rate + sum(rate_of_week$rating)
avg <- total_sum_rate / n_rate
}
rate_by_week[week - start_week] <- avg
}
return(rate_by_week)
}
# --> calculation of nr. of comments
calculate_comments <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
comments_of_rec <- recipe_comments[recipe_comments$recipe_id == single_recipe,]
week_comment_created <- ceiling(difftime(comments_of_rec$created_at, creation_timestamp, units = "weeks"))
comments_of_rec <- cbind(comments_of_rec, week_comment_created)
comments_by_week <- 0
count_comment <- 0
end_week <- start_week + n_weeks
for (week in start_week:end_week) {
partial_count <- nrow(filter(comments_of_rec, comments_of_rec$week_comment_created == week))
count_comment <- count_comment + partial_count
comments_by_week[week - start_week] <- count_comment
}
return(comments_by_week)
}
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
View(final_table)
aa <- months(final_table$calendar_week)
aa <- months(as.Date(final_table$calendar_week))
aa <- month(final_table$calendar_week)
aa <- month(final_table$calendar_week)
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
aa <- month(final_table$calendar_week)
aa <- final_table %>%
mutate(Month = month(ymd(year * 10000 + 0101) + calendar_week * 7))
final_table$year_week <- as.yearmon(paste(final_table$year, final_table$calendar_week), "%Y %w")
final_table$year_week <- as.yearmon.default(paste(final_table$year, final_table$calendar_week), "%Y %w")
final_table$year_week <- paste(final_table$calendar_week, "-", final_table$year)
final_table$year_week <- as.Date(final_table$year_week, "%U-%Y")
final_table$year_week <- paste(final_table$calendar_week, "-", final_table$year)
final_table$year_week <- as.Date(final_table$year_week, "%u-%Y")
final_table$year_week <- paste(final_table$calendar_week, final_table$year)
final_table$year_week <- as.Date(final_table$year_week, "%U %Y")
final_table$year_week <- paste(final_table$calendar_week, final_table$year)
final_table$year_week <- as.Date(final_table$year_week, "%u %Y")
final_table$year_week <- paste(final_table$calendar_week, final_table$year)
final_table$year_week <- as.Date(final_table$year_week, "%W %Y")
final_table$year_week <- paste(final_table$calendar_week, "-", final_table$year)
final_table$year_week <- paste(final_table$year, "-", final_table$calendar_week)
final_table$year_week <- format(as.Date(final_table$year_week, "%Y-%W"), "%m")
final_table$year_week <- paste(final_table$year, "-", final_table$calendar_week)
final_table$year_week <- paste(final_table$year, "-", final_table$calendar_week)
dates <- strsplit(final_table$year_week,"-")
dates <- sapply(dates,function(x) {
year_week <- unlist(x)
year <- year_week[1]
week <- year_week[2]
start_date <- as.Date(paste0(year,'-01-01'))
date <- start_date+weeks(week)
#note here: OP asked for beginning of week.
#There's some ambiguity here, the above is end-of-week;
#uncommment here for beginning of week, just subtracted 6 days.
#I think this might yield inconsistent results, especially year-boundaries
#hence suggestion to use end of week.  See below for possible solution
#date <- start_date+weeks(week)-days(6)
return (as.character(date))
})
final_table$year_week <- paste(final_table$year, "-", final_table$calendar_week)
dates <- strsplit(final_table$year_week,"-")
dates <- sapply(dates,function(x) {
year_week <- unlist(x)
year <- year_week[1]
week <- year_week[2]
start_date <- as.Date(paste0(year,'-01-01'))
date <- start_date+weeks(week)-days(6)
#note here: OP asked for beginning of week.
#There's some ambiguity here, the above is end-of-week;
#uncommment here for beginning of week, just subtracted 6 days.
#I think this might yield inconsistent results, especially year-boundaries
#hence suggestion to use end of week.  See below for possible solution
#date <- start_date+weeks(week)-days(6)
return (as.character(date))
})
splitDate <- strsplit(final_table$year_week, "-")
final_table$year_week <- paste(final_table$year, "/", final_table$calendar_week)
final_table$year_week <- paste(final_table$year, "/", final_table$calendar_week)
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# Read in data
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
recipe_emission <- data.table(dbReadTable(db, "monica_recipe_emission"))
recipe_type <- data.table(dbReadTable(db, "monica_recipe_type"))
# select only the recipes we need
recipes <- recipes[recipes$category == "Main dishes - meat" | recipes$category == "Main dishes - fish"
| recipes$category == "Main dishes - others" | recipes$category == "Main dishes - vegetarian"
| recipes$category == "Pasta & rice dishes" | recipes$category == "Starters"]
recipes <- recipes[recipes$recipe_id %in% recipe_type$recipe_id,]
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
recipe_comments <- recipe_comments[recipe_comments$recipe_id %in% recipes$recipe_id,]
recipe_ingredients_mapping <- recipe_ingredients_mapping[recipe_ingredients_mapping$recipe_id %in% recipes$recipe_id,]
recipes_rate <- recipes_rate[recipes_rate$recipe_id %in% recipes$recipe_id,]
# preparation for population
temporary_table_users <- data.table(created_at = users$created_at)
temporary_table_users <- cbind(my_user = 1, temporary_table_users)
temporary_table_users$new_date <- as.Date(temporary_table_users$created_at, format="%Y-%m-%d")
tmp <- list()
tmp$y <- format(temporary_table_users$new_date, format="%Y")
tmp$w <- format(temporary_table_users$new_date, format="%W")
tmp$y[tmp$w=="00"] <- as.character(as.numeric(tmp$y[tmp$w=="00"]) - 1)
tmp$w[tmp$w=="00"] <- "52"
temporary_table_users$new_date <- paste(tmp$y, tmp$w, sep = "-")
temporary_table_users2 <- ddply(temporary_table_users, .(new_date), summarize, pop=sum(my_user))
temporary_table_users2$cumsum_users <- cumsum(temporary_table_users2$pop)
temporary_table_users2$period <- seq(from = 1, to = nrow(temporary_table_users2))
### WORKS BECAUSE the number of periods is the same as for the oldest recipe == 2606
### WORKS BECAUSE the final population is equal to the nr of users == 329209
# select only the recipes we need and add column of 1s (reference for adopters, rate and comments)
recipes_create <- cbind(starting_week = 1, recipes_create)
recipes_create <- cbind(end = max(recipes_rate$timestamp), recipes_create)
recipes_create$timestamp <- as.Date(recipes_create$timestamp)
recipes_create$end <- as.Date(recipes_create$end)
# add calendar week of creation for every recipe
add_calendar_week <- function(table_for_calendar_week) {
Calendar_week <- as.numeric(strftime(table_for_calendar_week$timestamp, format = "%W"))
result <- cbind(table_for_calendar_week, Calendar_week)
return(result)
}
recipes_create <- add_calendar_week(recipes_create)
# add weeks of life for every recipe
add_life_time_to_table <- function(table_to_add) {
life_in_weeks <- ceiling(difftime(max(recipes_rate$timestamp), table_to_add$timestamp, units = "weeks"))
result <- cbind(table_to_add, life_in_weeks)
return(result)
}
recipes_create <- add_life_time_to_table(recipes_create)
### TABLE CONSTRUCTION ###
create_table_for_recipe <- function(row_to_calculate) {
n_weeks <- row_to_calculate$life_in_weeks # for every row, take the life in weeks
id_col <- replicate(n_weeks, row_to_calculate$recipe_id) # for every row in recipes_create, print the recipe_id for life_in_weeks time
data.table(
"RECIPE ID" = id_col,
period_in_weeks = seq(from = 1, to = n_weeks),
calendar_week = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%U"),
year = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%Y"),
total_adopters = calculate_adopters(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
mean_rate = calculate_mean(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
nr_comments = calculate_comments(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
population_size = as.numeric(tail(temporary_table_users2$cumsum_users, as.numeric(n_weeks)))
)
}
final_table <- data.table(
"RECIPE ID" = numeric(),
period_in_weeks = numeric(),
calendar_week = numeric(),
year = numeric(),
total_adopters = numeric(),
mean_rate = numeric(),
nr_comments = numeric(),
population_size = numeric()
)
## *** creation of the link to the specific period in which I have to add a new adopter
# nrow = total adopters, week = period in which adopted
# --> calculation of the nr. of adopters
calculate_adopters <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
adopters_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_adoption <- ceiling(difftime(adopters_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe until the rate has been given (for every rate)
adopters_of_rec <- cbind(adopters_of_rec, week_adoption) # add column with life (in weeks) for every rate to the subset
adoption_by_week <- 0
count_adoption <- 0
end_week <- start_week + n_weeks # total number of weeks ~ the life
for (week in start_week:end_week) { # start_week = column created above (~ starting_week)
partial_count <- nrow(filter(adopters_of_rec, adopters_of_rec$week_adoption == week)) # *** returns cumulated number of rows = nr of rates per recipe = nr of adopters
count_adoption <- count_adoption + partial_count # gives total adopters
adoption_by_week[week - start_week] <- count_adoption # tell at which week in the life (~period) you print a new adopter
}
return(adoption_by_week)
}
# --> calculation of the mean rate
calculate_mean <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
rates_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_rate_created <- ceiling(difftime(rates_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe, until the rate (for every rate)
rates_of_rec <- cbind(rates_of_rec, week_rate_created) # add column with life (in weeks) for every rate
rate_by_week <- 0
end_week <- start_week + n_weeks # start_week is the column with all 1s created before (--> starting_week)
n_rate <- 0
total_sum_rate <- 0
avg <- 0
for (week in start_week:end_week) {
rate_of_week <- rates_of_rec[rates_of_rec$week_rate_created == week,]
if (nrow(rate_of_week) > 0) {
n_rate <- n_rate + nrow(rate_of_week) # calculate the total number of rates as 0 (n_rate) + nr of rows in the subset l-130
total_sum_rate <- total_sum_rate + sum(rate_of_week$rating)
avg <- total_sum_rate / n_rate
}
rate_by_week[week - start_week] <- avg
}
return(rate_by_week)
}
# --> calculation of nr. of comments
calculate_comments <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
comments_of_rec <- recipe_comments[recipe_comments$recipe_id == single_recipe,]
week_comment_created <- ceiling(difftime(comments_of_rec$created_at, creation_timestamp, units = "weeks"))
comments_of_rec <- cbind(comments_of_rec, week_comment_created)
comments_by_week <- 0
count_comment <- 0
end_week <- start_week + n_weeks
for (week in start_week:end_week) {
partial_count <- nrow(filter(comments_of_rec, comments_of_rec$week_comment_created == week))
count_comment <- count_comment + partial_count
comments_by_week[week - start_week] <- count_comment
}
return(comments_by_week)
}
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
View(final_table)
final_table$year <- as.Date(final_table$year, format = "%Y")
final_table$year <- format(as.Date(final_table$year, format = "%Y-%m-%d"),"%Y")
final_table$calendar_week <- as.Date(final_table$calendar_week, format="%U")
final_table$calendar_week <- as.Date(final_table$calendar_week, format="%U") <- NULL
source("/Users/monicamirelabutnariuc/Downloads/UZH/FS_20/Master TS/R/old_conf.R")
# Read in data
recipes_create <- data.table(dbReadTable(db, "recipes_create"))
recipes_rate <- data.table(dbReadTable(db, "recipes_rate"))
recipes <- data.table(dbReadTable(db, "recipes"))
users <- data.table(dbReadTable(db, "users"))
recipe_comments <- data.table(dbReadTable(db, "recipe_comments"))
recipe_ingredients_mapping <- data.table(dbReadTable(db, "recipe_ingredients_mapping"))
recipe_emission <- data.table(dbReadTable(db, "monica_recipe_emission"))
recipe_type <- data.table(dbReadTable(db, "monica_recipe_type"))
# select only the recipes we need
recipes <- recipes[recipes$category == "Main dishes - meat" | recipes$category == "Main dishes - fish"
| recipes$category == "Main dishes - others" | recipes$category == "Main dishes - vegetarian"
| recipes$category == "Pasta & rice dishes" | recipes$category == "Starters"]
recipes <- recipes[recipes$recipe_id %in% recipe_type$recipe_id,]
recipes_create <- recipes_create[recipes_create$recipe_id %in% recipes$recipe_id,]
recipe_comments <- recipe_comments[recipe_comments$recipe_id %in% recipes$recipe_id,]
recipe_ingredients_mapping <- recipe_ingredients_mapping[recipe_ingredients_mapping$recipe_id %in% recipes$recipe_id,]
recipes_rate <- recipes_rate[recipes_rate$recipe_id %in% recipes$recipe_id,]
# preparation for population
temporary_table_users <- data.table(created_at = users$created_at)
temporary_table_users <- cbind(my_user = 1, temporary_table_users)
temporary_table_users$new_date <- as.Date(temporary_table_users$created_at, format="%Y-%m-%d")
tmp <- list()
tmp$y <- format(temporary_table_users$new_date, format="%Y")
tmp$w <- format(temporary_table_users$new_date, format="%W")
tmp$y[tmp$w=="00"] <- as.character(as.numeric(tmp$y[tmp$w=="00"]) - 1)
tmp$w[tmp$w=="00"] <- "52"
temporary_table_users$new_date <- paste(tmp$y, tmp$w, sep = "-")
temporary_table_users2 <- ddply(temporary_table_users, .(new_date), summarize, pop=sum(my_user))
temporary_table_users2$cumsum_users <- cumsum(temporary_table_users2$pop)
temporary_table_users2$period <- seq(from = 1, to = nrow(temporary_table_users2))
### WORKS BECAUSE the number of periods is the same as for the oldest recipe == 2606
### WORKS BECAUSE the final population is equal to the nr of users == 329209
# select only the recipes we need and add column of 1s (reference for adopters, rate and comments)
recipes_create <- cbind(starting_week = 1, recipes_create)
recipes_create <- cbind(end = max(recipes_rate$timestamp), recipes_create)
recipes_create$timestamp <- as.Date(recipes_create$timestamp)
recipes_create$end <- as.Date(recipes_create$end)
# add calendar week of creation for every recipe
add_calendar_week <- function(table_for_calendar_week) {
Calendar_week <- as.numeric(strftime(table_for_calendar_week$timestamp, format = "%W"))
result <- cbind(table_for_calendar_week, Calendar_week)
return(result)
}
recipes_create <- add_calendar_week(recipes_create)
# add weeks of life for every recipe
add_life_time_to_table <- function(table_to_add) {
life_in_weeks <- ceiling(difftime(max(recipes_rate$timestamp), table_to_add$timestamp, units = "weeks"))
result <- cbind(table_to_add, life_in_weeks)
return(result)
}
recipes_create <- add_life_time_to_table(recipes_create)
### TABLE CONSTRUCTION ###
create_table_for_recipe <- function(row_to_calculate) {
n_weeks <- row_to_calculate$life_in_weeks # for every row, take the life in weeks
id_col <- replicate(n_weeks, row_to_calculate$recipe_id) # for every row in recipes_create, print the recipe_id for life_in_weeks time
data.table(
"RECIPE ID" = id_col,
period_in_weeks = seq(from = 1, to = n_weeks),
calendar_week = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%U"),
year = format(seq(row_to_calculate$timestamp, row_to_calculate$end, by ="1 week"), "%Y"),
total_adopters = calculate_adopters(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
mean_rate = calculate_mean(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
nr_comments = calculate_comments(row_to_calculate$recipe_id, n_weeks,
row_to_calculate$starting_week, row_to_calculate$timestamp),
population_size = as.numeric(tail(temporary_table_users2$cumsum_users, as.numeric(n_weeks)))
)
}
final_table <- data.table(
"RECIPE ID" = numeric(),
period_in_weeks = numeric(),
calendar_week = numeric(),
year = numeric(),
total_adopters = numeric(),
mean_rate = numeric(),
nr_comments = numeric(),
population_size = numeric()
)
## *** creation of the link to the specific period in which I have to add a new adopter
# nrow = total adopters, week = period in which adopted
# --> calculation of the nr. of adopters
calculate_adopters <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
adopters_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_adoption <- ceiling(difftime(adopters_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe until the rate has been given (for every rate)
adopters_of_rec <- cbind(adopters_of_rec, week_adoption) # add column with life (in weeks) for every rate to the subset
adoption_by_week <- 0
count_adoption <- 0
end_week <- start_week + n_weeks # total number of weeks ~ the life
for (week in start_week:end_week) { # start_week = column created above (~ starting_week)
partial_count <- nrow(filter(adopters_of_rec, adopters_of_rec$week_adoption == week)) # *** returns cumulated number of rows = nr of rates per recipe = nr of adopters
count_adoption <- count_adoption + partial_count # gives total adopters
adoption_by_week[week - start_week] <- count_adoption # tell at which week in the life (~period) you print a new adopter
}
return(adoption_by_week)
}
# --> calculation of the mean rate
calculate_mean <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
rates_of_rec <- recipes_rate[recipes_rate$recipe_id == single_recipe,] # subset with all rates for the single recipe
week_rate_created <- ceiling(difftime(rates_of_rec$timestamp, creation_timestamp, units = "weeks")) # calculate how many weeks have passed from the creation of the recipe, until the rate (for every rate)
rates_of_rec <- cbind(rates_of_rec, week_rate_created) # add column with life (in weeks) for every rate
rate_by_week <- 0
end_week <- start_week + n_weeks # start_week is the column with all 1s created before (--> starting_week)
n_rate <- 0
total_sum_rate <- 0
avg <- 0
for (week in start_week:end_week) {
rate_of_week <- rates_of_rec[rates_of_rec$week_rate_created == week,]
if (nrow(rate_of_week) > 0) {
n_rate <- n_rate + nrow(rate_of_week) # calculate the total number of rates as 0 (n_rate) + nr of rows in the subset l-130
total_sum_rate <- total_sum_rate + sum(rate_of_week$rating)
avg <- total_sum_rate / n_rate
}
rate_by_week[week - start_week] <- avg
}
return(rate_by_week)
}
# --> calculation of nr. of comments
calculate_comments <- function(single_recipe, n_weeks, start_week, creation_timestamp) {
comments_of_rec <- recipe_comments[recipe_comments$recipe_id == single_recipe,]
week_comment_created <- ceiling(difftime(comments_of_rec$created_at, creation_timestamp, units = "weeks"))
comments_of_rec <- cbind(comments_of_rec, week_comment_created)
comments_by_week <- 0
count_comment <- 0
end_week <- start_week + n_weeks
for (week in start_week:end_week) {
partial_count <- nrow(filter(comments_of_rec, comments_of_rec$week_comment_created == week))
count_comment <- count_comment + partial_count
comments_by_week[week - start_week] <- count_comment
}
return(comments_by_week)
}
# ACTUAL CREATION OF FINAL TABLE indicating the nr. of recipes to include
for (r in 1:5) { # to print the whole table write "r in 1:nrow(recipes_create)"
new_table <- create_table_for_recipe( # new_table contains the last recipe_id, final_table contains all of them
recipes_create[r,]
)
final_table <- rbind(final_table, new_table)
}
View(final_table)
